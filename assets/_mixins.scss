/*
====================
	MIXINS
====================



*/
@mixin background($color, $opacity) {
    background-color: $color; /* The Fallback */
    background-color: rgba($color, $opacity);
}
@mixin text($color, $opacity){
	color: $color;
	color:rgba($color,$opacity);

}
@mixin font-size($size) {
  font-size: $size;
  font-size: calculateRem($size);
}
@mixin engraved($color){
	color:$color;
	border-top: #ccc 1px solid;
    border-right: #ccc 1px solid;
    border-bottom: #777 1px solid;
    border-left: #777 1px solid;

}

@mixin border($topl,$topr,$bottoml,$bottomr){
	border-top-left-radius: $topl;
    border-top-right-radius: $topr;
	border-bottom-left-radius: $bottoml;
    border-bottom-right-radius: $bottomr;
}
@mixin gradient($col1, $col2){
	 background: -webkit-linear-gradient($col1, $col2);
     background: -o-linear-gradient($col1, $col2);
     background: -moz-linear-gradient($col1, $col2); 
     background: linear-gradient($col1, $col2);
}


@mixin animate ($attr, $time){
	-webkit-transition: $attr, $time ease;
	-moz-transition: $attr, $time ease;
	-ms-transition:$attr, $time ease;
	-o-transition:$attr, $time ease;
	transition:$attr, $time ease;
}
@mixin transform ($val){
	-webkit-transform: $val;
	-moz-transform:$val;
	-ms-transform:$val;
	-o-transform:$val;
	transform: $val;
}
@mixin shadow-text ($val, $color){
	text-shadow: 1px 1px $val $color;
}
@mixin shadow ($val, $color){
	box-shadow: 0px 0px $val 2px $color;
}
@keyframes spin {
    from { transform:rotate(0deg); }
    to { transform:rotate(360deg); }
}
@mixin fullwidth(){
	width: 100%;
	height: auto;
}
@mixin ulnopadding(){
			-webkit-margin-before: 0em;
            -webkit-margin-after: 0em;
            -webkit-margin-start: 0px;
            -webkit-margin-end: 0px;
            -webkit-padding-start: 0px;
}
.one-edge-shadow {
	-webkit-box-shadow: 0 8px 6px -6px black;
	   -moz-box-shadow: 0 8px 6px -6px black;
	        box-shadow: 0 8px 6px -6px black;
}

.user-no-select{
	-webkit-user-select: none; /* Chrome/Safari */        
-moz-user-select: none; /* Firefox */
-ms-user-select: none; /* IE10+ */

/* Rules below not implemented in browsers yet */
-o-user-select: none;
user-select: none;
}

@mixin linearGradient($top, $bottom){
	background: $top; /* Old browsers */
	background: -moz-linear-gradient(top,  $top 40%, $bottom 70%); /* FF3.6+ */
	background: -webkit-gradient(linear, left top, left bottom, color-stop(40%,$top), color-stop(70%,$bottom)); /* Chrome,Safari4+ */
	background: -webkit-linear-gradient(top,  $top 40%,$bottom 70%); /* Chrome10+,Safari5.1+ */
	background: -o-linear-gradient(top,  $top 40%,$bottom 70%); /* Opera 11.10+ */
	background: -ms-linear-gradient(top,  $top 40%,$bottom 70%); /* IE10+ */
	background: linear-gradient(to bottom,  $top 40%,$bottom 70%); /* W3C */
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#ffffff', endColorstr='#000000',GradientType=0 ); /* IE6-9 */
}

@mixin rem($property, $values...) {
	$n: length($values);
	$i: 1;

	$pxlist: ();
	$remlist: ();

	@while $i <= $n {
		$itemVal: (nth($values, $i));
		@if $itemVal != "auto"{
			$pxlist: append($pxlist, $itemVal + px);
			$remlist: append($remlist, ($itemVal / 10) + rem);
		}@else{
			$pxlist: append($pxlist, auto);
			$remlist: append($remlist, auto);
		}


		$i: $i + 1;
	}

	#{$property}: $pxlist;
	#{$property}: $remlist;
}

@mixin image-2x($image, $width, $height) {
	@media (min--moz-device-pixel-ratio: 1.3),
	(-o-min-device-pixel-ratio: 2.6/2),
	(-webkit-min-device-pixel-ratio: 1.3),
	(min-device-pixel-ratio: 1.3),
	(min-resolution: 1.3dppx) {
		background-image: url($image);
		background-size: $width + px $height + px;
		background-size: $width / 10 + rem $height / 10 + rem;
	}
}

/// @output
/// ```css
///   background-image: -webkit-linear-gradient(top, <stops[1]>, <stops[2]>, ..., <stops[n]>);
///   background-image:         linear-gradient(to bottom, <stops[1]>, <stops[2]>, ..., <stops[n]>);
/// ```
///
/// @example
///   .selector {
///     @include x-multiple-colored-gradient(
///         'top',
///         #f22 0%,
///         #f2f 15%,
///         #22f 30%,
///         #2ff 45%,
///         #2f2 60%,
///         #2f2 75%,
///         #ff2 90%,
///         #f22 100%
///     );
///   }
///
@mixin x-multiple-colored-gradient ($args...) {

	$gradient: ();
	$pos: nth($args, 1);
	$pos_newsyntax: ();

	@if not is-valid-keyword-direction($pos) {
		$pos: 'top';
	}

	// New Syntax
	@if $pos == 'top' {
		$pos_newsyntax: 'to bottom';
	} @else if $pos == 'right' {
		$pos_newsyntax: 'to left';
	} @else if $pos == 'bottom' {
		$pos_newsyntax: 'to top';
	} @else if $pos == 'left' {
		$pos_newsyntax: 'to right';
	}

	@each $g in $args {
		@if not is-valid-keyword-direction($g) {
			$gradient: append($gradient, $g, comma);
		}
	}

	background-image: -webkit-linear-gradient(unquote($pos), $gradient);
	background-image:         linear-gradient(unquote($pos_newsyntax), $gradient);
}


///
/// Returns whether a value is a valid keyword direction.
///
/// @param {String} $value
///
/// @returns {Bool}
///
@function is-valid-keyword-direction($value) {
	@return not not index(
    'top' 'right' 'bottom' 'left'
    'to top' 'to right' 'to bottom' 'to left'
    'to top right' 'to right top'
    'to bottom right' 'to right bottom'
    'to top left' 'to left top'
    'to bottom left' 'to left bottom', $value);
}
.elegantshadow{
font-family: "Avant Garde", Avantgarde, "Century Gothic", CenturyGothic, "AppleGothic", sans-serif;
font-size: 92px;
padding: 80px 50px;
text-align: center;
text-transform: uppercase;
text-rendering: optimizeLegibility;

	color: #131313;
	background-color: #e7e5e4;
	letter-spacing: .15em;
	text-shadow:
					1px -1px 0 #767676,
					-1px 2px 1px #737272,
					-2px 4px 1px #767474,
					-3px 6px 1px #787777,
					-4px 8px 1px #7b7a7a,
					-5px 10px 1px #7f7d7d,
					-6px 12px 1px #828181,
					-7px 14px 1px #868585,
					-8px 16px 1px #8b8a89,
					-9px 18px 1px #8f8e8d,
					-10px 20px 1px #949392,
					-11px 22px 1px #999897,
					-12px 24px 1px #9e9c9c,
					-13px 26px 1px #a3a1a1,
					-14px 28px 1px #a8a6a6,
					-15px 30px 1px #adabab,
					-16px 32px 1px #b2b1b0,
					-17px 34px 1px #b7b6b5,
					-18px 36px 1px #bcbbba,
					-19px 38px 1px #c1bfbf,
					-20px 40px 1px #c6c4c4,
					-21px 42px 1px #cbc9c8,
					-22px 44px 1px #cfcdcd,
					-23px 46px 1px #d4d2d1,
					-24px 48px 1px #d8d6d5,
					-25px 50px 1px #dbdad9,
					-26px 52px 1px #dfdddc,
					-27px 54px 1px #e2e0df,
					-28px 56px 1px #e4e3e2;
}

@mixin animation($animate...) {
	$max: length($animate);
	$animations: '';

	@for $i from 1 through $max {
		$animations: #{$animations + nth($animate, $i)};

		@if $i < $max {
			$animations: #{$animations + ", "};
		}
	}
	-webkit-animation: $animations;
	-moz-animation:    $animations;
	-o-animation:      $animations;
	animation:         $animations;
}

@mixin keyframes($animationName) {
	@-webkit-keyframes #{$animationName} {
		@content;
	}
	@-moz-keyframes #{$animationName} {
		@content;
	}
	@-o-keyframes #{$animationName} {
		@content;
	}
	@keyframes #{$animationName} {
		@content;
	}
}

@mixin overlay($black_op){
    z-index: 3 !important;
	&:before{
		content:"";
		position: absolute;
		left:0;
		right: 0;
		top:0;
		bottom:0;
		background-color: rgba(0,0,0,$black_op);
		z-index: -1 !important;
	}
}